# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import TestData_pb2 as TestData__pb2


class TestDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReportTestResult = channel.unary_unary(
                '/TestData.TestDataService/ReportTestResult',
                request_serializer=TestData__pb2.ReportTestResultRequest.SerializeToString,
                response_deserializer=TestData__pb2.Empty.FromString,
                )
        self.ReportTestLog = channel.unary_unary(
                '/TestData.TestDataService/ReportTestLog',
                request_serializer=TestData__pb2.ReportTestLogRequest.SerializeToString,
                response_deserializer=TestData__pb2.Empty.FromString,
                )
        self.GetTestStep = channel.unary_unary(
                '/TestData.TestDataService/GetTestStep',
                request_serializer=TestData__pb2.GetTestStepRequest.SerializeToString,
                response_deserializer=TestData__pb2.GetTestStepReply.FromString,
                )
        self.SetStatus = channel.unary_unary(
                '/TestData.TestDataService/SetStatus',
                request_serializer=TestData__pb2.SetStatusRequest.SerializeToString,
                response_deserializer=TestData__pb2.SetStatusReply.FromString,
                )


class TestDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReportTestResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportTestLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTestStep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReportTestResult': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportTestResult,
                    request_deserializer=TestData__pb2.ReportTestResultRequest.FromString,
                    response_serializer=TestData__pb2.Empty.SerializeToString,
            ),
            'ReportTestLog': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportTestLog,
                    request_deserializer=TestData__pb2.ReportTestLogRequest.FromString,
                    response_serializer=TestData__pb2.Empty.SerializeToString,
            ),
            'GetTestStep': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTestStep,
                    request_deserializer=TestData__pb2.GetTestStepRequest.FromString,
                    response_serializer=TestData__pb2.GetTestStepReply.SerializeToString,
            ),
            'SetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetStatus,
                    request_deserializer=TestData__pb2.SetStatusRequest.FromString,
                    response_serializer=TestData__pb2.SetStatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TestData.TestDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TestDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReportTestResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestData.TestDataService/ReportTestResult',
            TestData__pb2.ReportTestResultRequest.SerializeToString,
            TestData__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportTestLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestData.TestDataService/ReportTestLog',
            TestData__pb2.ReportTestLogRequest.SerializeToString,
            TestData__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTestStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestData.TestDataService/GetTestStep',
            TestData__pb2.GetTestStepRequest.SerializeToString,
            TestData__pb2.GetTestStepReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestData.TestDataService/SetStatus',
            TestData__pb2.SetStatusRequest.SerializeToString,
            TestData__pb2.SetStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
